<TITLE>THE COMING SOFTWARE SHIFT</TITLE>
<PRE>
</PRE>
          This series of articles by George Gilder provides some
     interesting technological and cultural background that helps
     prepare readers to better understand and place in proper
     perspective the events relative to the National Data Super
     Highway, which are unfolding almost daily in the national press.
     I contacted the author and Forbes and as the preface below
     indicates obtained permission to post on the Internet.  Please
     note that the preface must be included when cross posting or
     uploading this article.<P>
<PRE>
</PRE>
<BLOCKQUOTE>
          The following article, THE COMING SOFTWARE SHIFT, was
    first published in Forbes ASAP, August 28, 1995.  It is a
    portion of George Gilder's book, Telecosm, which will be
    published in 1996 by Simon & Schuster, as a sequel to
    Microcosm, published in 1989 and Life After Television
    published by Norton in 1992.  Subsequent chapters of
    Telecosm will be serialized in Forbes ASAP.<P>
</BLOCKQUOTE>
<PRE>
</PRE>
<HR>
<B><PRE>


                                  THE COMING SOFTWARE SHIFT</PRE></B>
<PRE>
</PRE>
<B><PRE>

                                             BY</PRE></B>
<PRE>
</PRE>
<B><PRE>

                                       GEORGE GILDER</PRE></B>
<PRE>


</PRE>

<B><PRE>
                        "I was trying to conceive of how one could
                         approach it in a way that would be funda-
                         mental...like being at the center of a
                         sphere, where there were opportunities--and
                         problems, of course!--in all directions."</PRE></B>
<PRE>
</PRE>
<B><PRE>
                    --Patrick Haggerty of Texas Instruments, explaining
                      his decision to license the transistor from Bell
                      Laboratories in 1952--</PRE></B>
<PRE>
</PRE>
<HR>
<PRE>
</PRE>
     What will it take to launch a new Bill Gates--an Archimedean man
who sharply shifts the center of the sphere, alters the axes of
technology and economy, and builds a new business empire on new
foundations? Who can inherit the imperial throne in the microcosm and
telecosm currently held by the Redmond Rockefeller?<P><PRE></PRE>

     I will open the envelope in a minute.  But first I want to tell you
about a new software program called Netscape Navigator Personal
Edition.  I brought it back from Silicon Valley in late June and put the
package next to my PC.  The PC was proudly running a beta version of
Windows 95.  I had presented Windows 95 with great fanfare to my 11-year-
old son Richard as his route to the most thrilling new frontiers of the
computer world.  Multitasking, 32-bit operation, flat memory! Object
linking and embedding! "Information at your fingertips!"  But, all in
all, he preferred his Mac Quadra 840AV or even Windows 3.1.  They don't
crash so often, he explained.<P><PRE></PRE>

     I live out in the boondocks of western Massachusetts where there
are no convenient full-service connections to the Internet.  So I was
much less excited about Netscape than I was about Windows 95.  I hoped
Windows 95 would put me on line through the Microsoft Network system.
Some 10 minutes later, though, Richard wanted to know my credit card
number so I could choose an Internet service provider.  A couple of
minutes after that, linked through internetMCI's 800 number, Richard
was on the World Wide Web, using the InfoSeek service to examine my
chapters from Telecosm on line, searching the secrets of Sim City 2000
at Maxis, exchanging messages with Microsoft Flight Simulator buffs,
and exploring Disney.  As far as I know, he is still there.<P><PRE></PRE>
     
     The next thing I knew, my brother Walter came by.  He worked for a
computer company, New World Technologies in Ashland, Mass., that builds
customized Pentium machines and delivers them to value-added resellers
within 48 hours.  Walter wanted the Netscape program.  He took it back to
my parents' farm down the road and booted it up on a four-megabyte
386SX Dynatech previously used to map the pedigrees of a flock of
Romney sheep.  Soon he was on the Web scouting out the competition from
Dell and Micron and showing off the Gilder Web page.  This intrigued my
77-year-old mother, who had scarcely even noticed a computer before.  I
don't know how it happened, but before the night was out, she too was
on the Web, exploring catalogs of British colleges for her namesake
granddaughter who was soon to leave for London.<P><PRE></PRE>

     Now let me tell you about my introduction to Java, a new
programming language that menaces Microsoft's software supremacy.  I
encountered Java in early June at a Sun Microsystems conference at the
Westin St.  Francis Hotel in downtown San Francisco.  For a speech I was
to give, I had planned to use a multimedia presentation, complete with
MacroMind Director images and QuickTime video that I had contrived with
an expensive professional some months earlier.  The complexities of
Director prompted me to convert the program to Astound.  However, it
required an external disk drive and ran erratically with the eight
megabytes of RAM on my Power-Book.  I decided to speak nakedly from
notes on the coming technologies of sand and glass and air.<P><PRE></PRE>

     Following me immediately to the stage was Sun's amiable chief
scientist, John Gage.  He decided to illustrate his speech entirely from
the World Wide Web.  He began with a handsome page, contrived minutes
before, giving an account of my speech, headlined: "Gilder Addresses
Sun, Tells of Technologies of Opaque Silicon and Transparent Silicon."
Then he moved to the Gilder Telecosm archives run by Gordon Jacobson of
Portman Communications at a Web site located at the University of
Pennsylvania's School of Engineering.  Gage illustrated his talk with real-
time reports on traffic conditions in San Diego (where I was about to
go), weather conditions in Florida as a hurricane loomed, and
developments on Wall Street as IBM bid for Lotus.  He showed the Nasdaq
ticker running across the screen.  He showed animations of relevant
charts, cute little Java gymnasts cartwheeling across the screen, three-
dimensional interactive molecular models and an overflowing coffee cup,
entitled "HotJava."<P><PRE></PRE>

     None of his information and images used a desktop presentation
program, whether from MacroMind or from Microsoft.  None of them used a
database engine, whether SQL or Oracular.  Indeed, except for the Gilder
speech report, none were created beforehand.  Incurring no memory or
disk drive problems, Gage summoned all the illustrations to his
PowerBook directly from the Internet.  The animations employed a new
computer language, Java, written for the Web by the venerable Sun
programmer James Gosling.  Java allows transmission of executable
programs to any computer connected to the Net to be interpreted and
played safely and securely in real time.<P><PRE></PRE>

     Clifford Stoll calls it "Silicon snake oil."  But I call it a
fundamental break in the history of technology.  It is the software
complement of the hollowing out of the computer described in Forbes
ASAP ("The Bandwidth Tidal Wave," December 5, 1994).  Almost overnight,
the CPU and its software have become peripheral; the network, central.
I had spent weeks working on a presentation on my desktop computer,
using an array of presentation software.  But Gage improvised a more
impressive and animated presentation without using any desktop
presentation programs at all.  The World Wide Web and the Java language
were enough.  Restricted to the files of my computer, I struggled with
storage problems and incompatible research formats, while he used the
storage capacity and information resources of more than five million
host computers on the Net.<P><PRE></PRE>

     Similarly for my family, the limitations of my parents' barnyard
four-megabyte 386SX didn't matter.  The operating system also didn't
matter.  What was crucial was the network gear and software.  My brother
Walter had installed a modem that linked to the Web at an average of
24.6 kilobits per second.  With the Netscape Navigator, that was enough.
Actually 14.4 would have been enough.  Enough to launch a new Bill
Gates.<P><PRE></PRE>

     Admit it, the legacy version, once so luminous, is beginning to
lose its shine.  You thrill no longer at his vaporware $ 50 million
house, fenestrated with $ 40 billion Windows, offering misty views of
Daytona, Memphis, Cairo, and other far-off places you no longer really
care to go, even if--OLE--they are swimming with GML 3D screen-
savers from London's National Gallery endlessly hurdling the 640K
barrier as if it were flat as a Mac.<P><PRE></PRE>

     At the most essential level, Bill Joy of Sun illuminated Gates's
dilemma at Esther Dyson's PC Forum conference in 1990.  Known as one of
the great minds in software, yet losing share inexorably to Microsoft,
Joy seemed to be moving into the role of conference crank.  Year after
year, he lamented the prolix inelegance of the triumphant waves of
Microsoft programs sweeping through the industry: "As we add more and
more of these features to older systems," he said, "the complexity gets
multiplicative.  I have 10 different packages that interact in 10-to-the-
10th different ways.  I get all sorts of surprises, and yet because
these things don't play together well the power is only additive.  I get
this feature and that feature but the combinations don't work.  What I'd
really like to see is a system where the complexity goes up in a linear
way but the power goes up exponentially."<P><PRE></PRE>

     In software, complexity has long been rising exponentially, while
power has been rising additively.  In response, Niklaus Wirth, the
inventor of Pascal and other programming languages, has propounded two
new Parkinson's Laws for software: "Software expands to fill the
available memory," and "Software is getting slower more rapidly than
hardware gets faster."  Indeed, newer programs seem to run more slowly
on most systems than their previous releases.  Compare Word 6.0 for the
Mac, for example, with Word 5.0, or WordPerfect 6.0 for Windows with
WordPerfect for DOS.<P><PRE></PRE>

     But none of this matters.  Gates has moved from triumph to triumph
by shrewdly exploiting the advances of microcosmic hardware.  With
Moore's Law and the Law of the Microcosm, the number of transistors on
a chip doubles every 18 months, and cost/performance rises as the
square of the number of transistors.  The complexity sinks into the
microcosm and power rises exponentially on the chip to absorb all the
complexity grenades rolling down from Redmond.<P><PRE></PRE>

     Gates travels in the slipstream behind Moore's Law, following a
key rule of the microcosm: Waste transistors.  As Nicholas Negroponte
puts it, "Every time Andy [Grove] makes a faster chip, Bill uses all of
it."  Wasting transistors is the law of thrift in the microcosm, and
Gates has been its most brilliant and resourceful exponent.<P><PRE></PRE>

     Meanwhile, in the face of Gates's ascendancy, Bill Joy seemed to
grow curls and shed influence, as Sun played rope-a-dope with Hewlett-
Packard and other workstation rivals.  In 1990, he retreated to a sylvan
aerie in Aspen, Colo., to pursue "advanced research" for Sun.  But his
talk of small programs and handheld consumer appliances seemed
irrelevant to the company.<P><PRE></PRE>

     Nonetheless, in early 1990, showing up late--in a Hawaiian shirt
--to address a formal dinner in Silicon Valley, Bill Joy had a great
prophetic moment.  He cited the Moore's Law trends as grounds for
granting the first five years of the 1990s to Bill Gates.  "It's pretty
much determined," he said.  Indeed, in the late 1980s, Joy had
personally made a separate peace with Microsoft by selling a large
portion of his Sun holdings and buying Microsoft shares, thus becoming
the second richest of Sun's four founders.  (The richest, Andy
Bechtolsheim, jumped even deeper into Microsoft.) But then, around
1995, predicted Joy, everything would change.  There would be a
"breakthrough that we cannot imagine today."  He even acknowledged that
the breakthrough would not come from Sun, but "from people and
companies we cannot know today."<P><PRE></PRE>

     The key to software innovation, he said, was smart programmers.
Smart programmers are hundreds of times more productive than ordinary
programmers.  And "let's be truthful," said the sage of Sun, propounding
what has become known as Joy's Law, "most of the bright people don't
work for you--no matter who you are.  You need a strategy that allows
for innovation occurring elsewhere."  To the Justice Department,
Microsoft's overwhelming OS market share and its teeming armies of
programmers seem a barrier to entry for other software competitors.  To
Joy, Microsoft's size and dominance could become a barrier to entry for
Microsoft, blocking it from the key new markets of the late 1990s.<P><PRE></PRE>

     It is now clear that Joy was on target.  The breakthrough is here
in force, invading and occupying all the commanding heights of the
information economy, from the media to the universities.  It is the
World Wide Web and its powerful browsers, servers, languages and
programming tools.  Software on individual machines still bogs down in
the macrocosmic swamps of complexity.  But in the telecosm, yields rise
exponentially almost without limit in proportion to the number and
power of the machines on the network.  No matter how much memory and
other storage is created on the desktop, no matter what information
resources are assembled on CD-ROMs, no matter how powerful are the
database tools created for the LAN, the desktop imperium will pale and
wither before the telecosmic amplitudes of the Internet.<P><PRE></PRE>

     For the last five years, the number of machines on the network has
been rising between five and 10 times faster than the number of
transistors on a chip.  With 1,300 miles of fiber-optic lines being laid
every day in the U.S., bandwidth is sure to rise even faster than the
number of networked computers (see Forbes ASAP, "The Bandwidth Tidal
Wave," December 5, 1994).  This awesome transition presents a supreme
chance for new leadership in developing software focused less on
wasting transistors than on wasting bandwidth.<P><PRE></PRE>

     A computer on every desktop and in every home? Information at your
fingertips? SQL Server 6.0? My son Richard yawns.  Let's face it, Bill,
that stuff is yesterday.  In the new era, Microsoft can continue to feed
on the microcosm.  But the leading-edge companies will move to the
frontiers of the telecosm, where collectively they will grow far faster
than Microsoft.<P><PRE></PRE>
<PRE>
</PRE>
<B><PRE>
     So, Open the Envelope.  Let's Find a New Bill Gates.</PRE></B>
<PRE>
</PRE>
     Start by adding 100 pounds of extra heft, half a foot of height
and two further years of schooling, then make him $ 12.9 billion
hungrier.  Give him a gargantuan appetite for pizza and Oreos, Bach,
newsprint, algorithms, ideas, John Barth, Nabokov, images, Unix code,
bandwidth.  Give him a nearly unspellable Scandinavian name--Marc
Andreessen.<P><PRE></PRE>

     Put him to work for $ 6.85 per hour at Illinois's National Center
for Supercomputing Applications (NCSA) writing 3D visualization code on
a Silicon Graphics Indy for a Thinking Machine C5 or a Cray YMPI6.
Surround him on all sides by the most advanced computers and software
in the world, under the leadership of cybernetic visionary Larry Smarr.
What will happen next? "Boredom," Andreessen replies.  Supercomputers,
already at the end of their tether, turned out to be "underwhelming
Unix machines."<P><PRE></PRE>
     
     Then, for a further image of the end of the world, take him in the
fall of 1990 off to Austin, Tex., for two semesters at IBM.  "They were
going to take over the 3D graphics market, they were going to win the
Malcolm Baldrige Award, they were going to blow Silicon Graphics [the
regnant Silicon Valley 3D workstation company] off the map, all in six
months."  Andreessen began by doing performance analysis and moved on to
work on the operating system kernel.  In mid-1991, after constant
delays, the company was finally ready to ship a world-beating 3D
engine.  But the new IBM machine turned out to be four times slower at
seven times the price of the equivalent Silicon Graphics hardware that
IBM had bundled a year and a half earlier with its RS6000 RISC (reduced
instruction set computing) workstation.  Austin IBM returned to the
drawing board and Andreessen returned to Illinois to get his degree.<P><PRE></PRE>
                                
     In both commercial and academic settings, Andreessen thus had the
good fortune of working at the very heart of the old order of computing
in its climactic phase.  As Andreessen saw it, little of long-term
interest was going on at either establishment.  But both did command one
huge and felicitous resource, vastly underused, and that was the
Internet.  "Designed for all the wrong reasons--to link some 2,000
scientists to a tiny number of supercomputers," it had exploded into a
global ganglion thronged by millions of people and machines.<P><PRE></PRE>

     Many people saw the Internet as throbbing with hype and seething
with problems--Clifford Stoll's book, Silicon Snake Oil, catalogs
many: the lack of security, substance, reliability, bandwidth, easy
access; the presence of porn, fraud, frivolity and freaks guarantees,
so he says, that no serious business can depend on it for critical
functions.  But to Andreessen the problems of the Internet are only the
other side of its incredible virtues.<P><PRE></PRE>

     "By usual standards," says Andreessen, "the Internet was far from
perfect.  But the Internet finds its own perfection--in the millions
of people that are able to use it and the hundreds of thousands who can
provide services for it."  To Andreessen, all the problems signaled that
he was at the center of the sphere, gazing in wild surmise at "a giant
hole in the middle of the world"--the supreme opportunity of the age.<P><PRE></PRE>
     
     Andreessen saw that, for all its potential, there was a monstrous
incongruity at the heart of the Internet.  Its access software was at
least 10 years behind.  "PC Windows had penetrated all the desktops, the
Mac was a huge success, and point-and-click interfaces had become part
of everyday life.  But to use the Net you still had to understand Unix.
You had to type FTP [file transfer protocol] commands by hand and you
had to be able to do address-mapping in your head between IP addresses
and host names and you had to know where all the FTP archives were; you
had to understand IRC [Internet relay chat] protocols, you had to know
how to use this particular news reader and that particular Unix shell
prompt, and you pretty much had to know Unix itself to get anything
done.  And the current users had little interest in making it easier.  In
fact, there was a definite element of not wanting to make it easier, of
actually wanting to keep the riffraff out."<P><PRE></PRE>
     
     The almost miraculous key to opening up the Internet was the
concept of hypertext, invented by Theodor Holm Nelson, the famously
fractious prophet of the "Xanadu" network, and son of Celeste Holm, the
actress.  A hypnotic speaker, with a gaunt countenance and flowing
golden hair, Nelson seems an Old Testament Jeremiah from Central
Casting as he rails against the flaws and foibles of current-day
computing.<P><PRE></PRE>

     Hypertext is simply text embedded with pointers to other text,
instantly and fully available by a point and click.  For the source of
the concept, Nelson quotes an essay by Vannevar Bush written in 1945
and read to him by his father as a boy: "The human mind .  .  .  operates
by association.  With one item in its grasp, it snaps instantly to the
next that is suggested by the association of thoughts, in accordance
with some intricate web of trails carried by the cells of the brain."
Projecting this idea from a single human brain to a global ganglion,
Nelson sowed the conceptual seeds of the World Wide Web.<P><PRE></PRE>

     Andreessen can explain both the power of hypertext and its slow
emergence in commercial products: "Xanadu was just a tremendous idea.
But hypertext depends on the network.  If the network is there,
hypertext is incredibly useful.  It is the key mechanism.  But if the
network is not there, hypertext does not give you any of the richness."
Hence, Apple's HyperCard and similar schemes failed to ignite.  The link
is not hyper if it is restricted to your hard drive or CD-ROM.
Connected to millions of computers around the globe, it becomes
exponentially hyper.<P><PRE></PRE>

     "The other thing about hypertext," says Andreessen, "is that, even
on networks, traditionally it had been developed by theoreticians and
people very deep in the computer science community, and they tended to
worry very deeply about problems like, 'Well, what happens if the
information moves?'" As Gates put it in 1992: "The idea of locating
things that move by their properties and dealing with the security and
efficiency issues, including using replication to do this stuff well,
is a very tough problem.  That's what Windows's Cairo is all about.
Three or four Ph.D.  theses talk about this, but a commercial system has
never done it."<P><PRE></PRE>

     Andreessen brings the issue down to earth: "You've got a pointer
at a piece of information on the network, but Joe, who's running that
information, moves it somewhere else.  Computer scientists would take a
look at the problem and say, 'Oh, the system doesn't work.' On the
Internet, we look at that problem and say, 'Oh well, here's another
20,000 pointers that do work.' And maybe we can send email to Joe and
he'll put his information back."  In other words, you don't wait for
Cairo or Xanadu to try to solve every problem.  You go with the fabulous
flow of opportunities.<P><PRE></PRE>

     Nelson's idea led to what Gary Wolf, a contributing writer of
Wired, calls "one of the most powerful designs of the 20th century"
--a universal library, a global information index and a computerized
royalty system.  But Nelson's quest for perfection led to a 20-year
adventure in futility.  "The opinion of the Xanadu people to this day is
that the Web and the Internet are much too simple.<P><PRE></PRE>
     
     They don't solve the problems.  For instance, the links aren't
fully bidirectional.  You don't know exactly who's pointing to your
page, and there's two ways to look at that.  The way that Ted Nelson
looks at it is 'That's bad!' The way that I look at it is 'That's
great!' All of a sudden anyone can point to your page without
permission.  The Net can grow at its own rate.  You get the network
effect, you get Metcalfe's Law, it spirals completely out of control.<P><PRE></PRE>
<PRE>
</PRE>
<B><PRE>
     Isn't That Fantastic?"</PRE></B>
<PRE>
</PRE>
     In 1988, Xanadu found funding from John Walker, the charismatic
recluse, taxpatriate in Switzerland, and founder of Autodesk, the
desktop computer-aided design (CAD) company.  As Walker prophetically
declared in 1988: "In 1964, Xanadu was a dream in a single mind.  In
1980, it was the shared goal of a small group of brilliant
technologists.  By 1989, it will be a product.  And by 1995, it will
begin to change the world."  All truer than Walker could have imagined,
but it would not happen, alas, at Autodesk.  Haunted by dreams of
perfection and hobbled by hyperventilation at the helm, Xanadu misted
over.  Autodesk sustained the effort until it was mercifully terminated
by the new CEO, Carol Bartz, in 1993 at the very moment that a real
Xanadu, deemed hopelessly imperfect and inadequate by Nelson, was about
to burst forth efflorescently on the Internet.<P><PRE></PRE>

     The demiurgic step came from Tim Berners-Lee at CERN in
Switzerland, creating the World Wide Web based on a universal hypertext
function.  He launched the initial HTTP (hypertext transfer protocol)
governing transport on the Web.  He developed URLs (uniform resource
locators) as a common addressing system that joined most of the
existing Internet search and linkage technologies.  He conceived the
HTML (hypertext markup language), a kind of PostScript for the Web.  He
made the system ignore failures (Joe's moving data could not crash your
machine).  Thus, invoking a browser (i.e., a hypertext reader), the user
could point and click to information anywhere on the Net, unconscious
of whether it was in the form of a file transfer, an email, a Gopher
search or a news posting, or whether it was in the next room or in
Tasmania.<P><PRE></PRE>

     Berners-Lee addressed a basic problem of the Internet from the
point of view of an academic researcher.  But the real opportunity was
to open the Internet to the world and the world to the Internet, and
that would require more than a facility for cruising through textual
materials.  After all, the bulk of human bandwidth is in a person's eyes
and ears.  For absorbing text, as Robert Lucky, author of Silicon
Dreams, has pointed out, the speed limit is only some 55 bits per
second.<P><PRE></PRE>

     To burst open the Internet would require reaching out to the
riffraff who travel through pictures and sounds at megahertz speeds.  To
critics of a more vulgar Net, such as Stoll, more riffraff sending
callipygian naked-lady bitmaps and voluminous digital ululations from
the Grateful Dead and QuickTime first-step baby videos traipsing down
the lines and wriggling through the routers would soon cause a gigantic
crash.  Even some of Andreessen's main allies at the NCSA shared some of
these fears.  At CERN, Berners-Lee opposed images and video on these
grounds.  The technologists all held a narrowband view of the world,
imagining bandwidth as an essentially scarce resource to be carefully
husbanded by responsible citizens of the cybersphere.<P><PRE></PRE>

     So Tim Berners-Lee alone could not burst open the Internet pinata
and give it to the world.  As Richard Wiggins, author of Internet for
Everyone: A Guide for Users and Providers, observes, "During 1992 and
early 1993, graphical Gopher clients for the Macintosh and Windows
evolved, and it appeared that Gopher would outstrip the fledgling Web."
It was the ultimate broadband booster, Marc Andreessen, working with
NCSA colleague Eric Bina, who ignited the Web rocket.  One late December
night in 1992 at the Espresso Royale cafe in Champaign-Urbana,
Andreessen looked his friend Eric Bina in the eye and said: "Let's go
for it."<P><PRE></PRE>

     Every Gates has to have his Paul Allen (or Jobs, his Steve
Wozniak).  Andreessen's is Bina--short and wiry where Andreessen is
ursine, cautious where he is cosmic, focused where he is expansive,
apprehensive where he is evangelical, bitwise where he is prodigal with
bandwidth, ready to stay home and write the code where Andreessen is
moving on to conquer the globe.  Wildly contrasting but completely
trusting and complementary, these two--in an inspired siege of
marathon code-wreaking between January and March 1993--made Mosaic
happen.  A rich image-based program for accessing the World Wide Web and
other parts of the Internet, Mosaic requires no more knowledge of its
internal mechanics than is needed by the user of the steering wheel of
a car.  With a mere 9,000 lines of code (compared to Windows 95's 11
million lines, including 3 million lines of MSN code), Mosaic would
become the most rapidly propagated software program ever written.<P><PRE></PRE>

     Andreessen could defy all the fears of an Internet image crash
because he lived in a world of bandwidth abundance and fiber galore.  He
fully grasped the law of the telecosm.  Every new host computer added to
the Net would not only use the Net; it would also be a new resource for
it, providing a new route for the bits and new room to store them.
Every new flood of megabyte bitmaps would make the Net more
interesting, useful and attractive, and increase the pressure for
backbones running at gigabits per second and above.  The Internet must
be adapted to people with eyes and ears.  They won't abuse it, he
assured Bina without a smile.  After all, he knew he would have to rely
on Bina for much of the graphics coding.<P><PRE></PRE>

     "I was right," Bina says now.  "People abused it horribly.  People
would scan in a page of PostScript text in a bitmap, taking over a
megabyte to display a page that would take maybe 1,000 bytes of text.
But Marc was also right.  As a result of the glitz and glitter,
thousands of people wasted time to put in pretty pictures and valuable
information on the Web, and millions of people use it."<P><PRE></PRE>

     Working night and day at the NCSA, wrangling over issues, arts and
letters, music and Unix code at the Espresso Royale down the street,
the two programmers achieved a rare synergy.  "We each did the job that
most appealed to us," says Bina, "so each of us thinks the other did
the hard stuff."  Bina wrote most of the new code--in particular, the
graphics, modifying HTML to handle images, adding a GIF (graphics
interchange format) decoder, incorporating color management tools.
Andreessen took the existing library of communications code from CERN
and tore it apart and rewrote it so it would run more quickly and
efficiently on the network.<P><PRE></PRE>

     As time passed, they brought in other young programmers from the
NCSA--among them Chris Wilson, Jon Mittelhauser, Chris Houck and Aleks
Totic--to port the system to Windows and Mac machines.  With help from
them, they designed dynamic forms with type-in fields, check boxes,
toggle buttons and other ordered ways of entering simple text for
searches and other functions beyond simple hypertext pointing at a URL.
For example, a dynamic form is now used by Pizza Hut for ordering a
pizza on line.  Finally, because every change in the browser required
complementary changes in the servers at CERN--where the physicists
tended to be busy and glitz-averse--Bina and Andreessen decided to do
their own servers.  The NCSA's Rob McCool took charge of this crucial
project.<P><PRE></PRE>

     In the end, they had created an entirely new interface for the
Internet and new communications software to render it crisply
accessible--a look and feel that almost immediately struck everyone
who used it as an amazing breakthrough.  In February 1995, Bob Metcalfe
wrote a column in InfoWorld predicting that Web browsers would become,
in effect, the dominant operating system for the next era.<P><PRE></PRE>

     Browsers are now ubiquitous.  Every major company and many minor
ones are building them.  Some eight million people use them.  IBM, AT&T,
Novell, Microsoft, NetCom, Sun, Silicon Graphics, America Online,
NetManage, Quarterdeck, Quadralay, Apple, SPRY-CompuServe, Frontier
Technologies, Delphi, MCI, Wollongong, even the Spyglass spinoff from
the NCSA--you name it--all these companies are building, licensing,
enhancing or bundling a browser.  Many of these ventures, led by
Quarterdeck's smart hotlists and "drag-and-drop" ease of use, have
outpaced Mosaic and prompted a leapfrogging contest of can-you-top-
this.<P><PRE></PRE>

     That is what happens when an entrepreneur performs a truly
revolutionary act, supplies the smallest missing factor, as Peter
Drucker puts it, that can transform a jumble of elements into a working
system--the minimal mutation that provokes a new paradigm.  In 1977,
the relevant jumble was small computers, microprocessors and assembly
language programming.  Bill Gates and Paul Alien supplied the key
increment: software tools and the Basic language for the embryonic
personal computer.  In 1993, Andreessen and Bina set out to supply the
minimal increment to convert the entire Net, with its then one to two
million linked computers (today it's an estimated seven million
computers) and immense informational resources, into a domain as
readily accessible to an 11-year-old as a hard drive or CD-ROM on a Mac
or Windows PC.<P><PRE></PRE>

     As a result, the same forces of exploding bandwidth, the same laws
of the telecosm that are wreaking revolution in hardware, hollowing out
the computer--rendering the CPU peripheral and the network central--
are also transforming software.  All forms of desktop software--
operating systems, applications and utilities--are becoming similarly
peripheral.  The ever-growing gigapedal resources of the Internet will
always dwarf any powers and functions that can be distilled on a
desktop or mobilized on the backplane of a supercomputer.<P><PRE></PRE>

     Last year, for example, four researchers at MIT, Iowa State,
Bellcore and Oxford (U.K.) triumphantly claimed a $ 100 reward for
solving a grand challenge problem.  They announced that they had broken
an RSA encryption code of 129 digits that one of RSA's inventors, R.  L.
Rivest, when offering the $ 100 prize in 1977, calculated would take
four quadrillion years for a supercomputer to crack.  They did not
accomplish their feat on a single machine (none yet exists that can
perform these computations) but on a virtual machine consisting of
1,600 mostly modest workstations scattered around the Internet.
Similarly, Gordon Bell in 1992 for the first time granted his
achievement award for price and performance in the application of
supercomputers, not to a single machine, but to a distributed Internet
virtual system.<P><PRE></PRE>

     The success of the Internet model even in these high-powered
processing applications portends and symbolizes a definitive reality,
which gathers increasing force as network bandwidth begins to exceed
the internal bandwidth on computer backplanes.  From now on, the
relevant computer is the network and the ascendant software is Internet
software.<P><PRE></PRE>

     Giving the program away on the Net, Andreessen released Mosaic in
binary form, already compiled for any popular computer platform, and
helped bring more than a million newcomers to the Web in six months.  In
time, such an upheaval would even reach the notice of the management of
the NCSA.  At the National Science Foundation in Washington, D.C., a
friend eagerly showed Mosaic to Larry Smarr, who was visiting from
Illinois.  He was startled to see that this new marvel was a creation of
his own shop at the NCSA.  Perhaps he should look into it.  Perhaps there
was more to sell to Washington than Fiber Channels between scientists
and Crays.  From that moment on, pushing Mosaic became the chief "grand
challenge problem" of the University of Illinois Supercomputing Center.<P><PRE></PRE>

     After Andreessen's college graduation in December 1993, Joseph
Hardin, head of the NCSA, asked him to stay on at the center.  But he
added one condition, namely, that the young programmer leave the Mosaic
project.  "Some 40 people had a role in creating Mosaic," he said.
"Don't you think it's time to give someone else a chance to share the
glory?" Reasoning that they would have a still better chance in his
absence, Andreessen left for Silicon Valley.<P><PRE></PRE>

     After a few months doing Internet security functions at a company
called EIT, Andreessen attracted the attention of the legendary Jim
Clark, founder of Silicon Graphics Inc. and inventor of the Geometry
Engine, capable of 3D graphics, that impelled SGI's growth.  At loose
ends, like most of the industry's venturers, Clark was looking for
opportunity in all the wrong places--3D games, interactive TV,
Hollywood.  He found himself increasingly entranced with the Mosaic
browser.  Hearing that the author of Mosaic had arrived in Silicon
Valley, he sent Andreessen an email in early February 1994.<P><PRE></PRE>

     The rest is history, in the accelerated form familiar in the
Valley.  Jim Clark met with Andreessen and signed him up as the first
employee of a new company.  "What has happened to the other NCSA
programmers?" he wanted to know.  Hearing that Chris Wilson, who had
helped port the system to the PC, had left the center to join SPRY,
Clark decided to act fast.  He invited Bina to come to Silicon Valley
and meet with him on his yacht.  Avoiding temptation (Bina's wife is a
tenured professor of database technology at Champaign-Urbana and is
wary of snake oil), Bina spurned the invitation.  Andreessen wrote him a
glum email: "Sorry.  It would have been nice to have had you here."<P><PRE></PRE>

     The next thing Bina knew, Andreessen called him to announce that
he and Clark were flying to Champaign-Urbana and wanted to meet with
Bina and the rest of the key programmers the next day at the local
University Inn.  "When I got off the elevator at the hotel," Bina
recalls, "this blond guy who reminded me of my dad stepped back, looked
me slowly up and down, and spoke: 'Marc said you could walk on water.  I
have never seen anyone who could do that before.'" Clark soon assured
him he could stay in Illinois.<P><PRE></PRE>

     According to Bina, Clark spread a contagion of entrepreneurial
excitement.  Then one by one he made seven of them offers.  All signed
up.  By the first week of April, Mosaic software was on the way and Jim
Clark forgot about interactive TV.<P><PRE></PRE>

     Greeting this bold new company, however, were rumblings about a
possible intellectual property suit from the NCSA.  This surprise
banished any idea of using Mosaic in any form.  That was fine with them.
They knew Mosaic was a quickly written hack designed for T1 and T3
lines running at up to 45 megabits a second at the NCSA.  "We knew that
everyone had Mosaic," says Bina.  "We were glad to start from scratch
again."  Moving into a small office in Mountain View at a cost of less
than $ 1 per square foot, they set to work.<P><PRE></PRE>
     
     In the new company, then called Mosaic Communications, Andreessen
ascended to management.  Bina, working in Illinois for all but one
frenzied week a month, immersed himself in creating the new code.  They
revised it to work over a 14.4 modem.  They focused on making it the
only system that is fully secure.  They added new supports for more
elegant layouts and richer documents.  Giving the program away on the
Net, within a few months Netscape won 70% of the Web browser market,
which it still holds.<P><PRE></PRE>

     Most important for the future of the company, they developed a
stream of new server products, which they sold to most of the existing
and aspiring on-line services and Internet service providers, from
internetMCI and marketplaceMCI to IBM's Prodigy and Murdoch's Delphi.
Altogether, they had released a total of 11 new products by midsummer
of this year, from $ 50,000 secure server applications to the $ 39
Netscape Navigator Personal Edition complete with TCP/IP stack for full
connection to the Internet in 10 minutes anywhere in the country.<P><PRE></PRE>

     As Wall Street began pouring money on any rival company with an
Internet product, the stock market became a Netscape imperative.  This
posed a problem for Clark.  There would be no difficulty attracting a
frenzy of interest.  The question was, Where would they hide Andreessen
during the road show? Introducing him to John Doerr of Kleiner Perkins
Caufield & Byers and other Silicon Valley clout, however, Clark instead
resolved to teach the young bear how to chew with his mouth closed, tie
a tie and get to work earlier than 8:30. . . p.m.  Then he prepared to
place him in the nose cone of an Initial Public Orbiting that would
value the gang at hundreds of millions of dollars, point Andreessen
toward the Millennium and, with luck and the right characterological
chemistry, have a new Bill Gates for the late 1990s.<P><PRE></PRE>

     Here he is, well after 8 p.m., roaring down El Camino Real in his
'94 red Mustang, filled with pizza rinds, empty cans of Sprite, a
mostly shredded copy of the San Jose Mercury News and a bulging issue
of Micro Times smeared in popcorn butter, talking with both hands to a
writer from Forbes ASAP hunched amid the clutter and stealthily
searching for a seat belt.<P><PRE></PRE>

     Amazingly free of the NIH (not invented here) syndrome afflicting
many of his elders--his browser combines products from some 17
sources--Andreessen was discoursing on the virtues of Java, a
language he says portends a telecosmic advance even more profound and
enduring than the browser and related servers themselves.<P><PRE></PRE>

     For creating innovative stuff on the Web, Andreessen explains,
"The alternative languages are grim.  Perl is limited to text strings.
Telescript from General Magic doesn't pass because it's proprietary.
Tickle [Tcl] lacks power and features.  Scheme and LISP are dead.  Visual
Basic lacks expressiveness and it is too much controlled by Microsoft.
Dylan is still an Apple research project.  None of them are truly suited
to the Web environment.  Java is as revolutionary as the Web itself."
Tying Netscape to Java assures the company a central role in a coming
efflorescence of the Web more significant in its implications than even
the current manifestation.  In the process, it will invert the entire
world of software in a way that may permanently displace Microsoft from
the center of the sphere.<P><PRE></PRE>

     Behind this development is not some 24-year-old geek from a
supercomputer center, but the industry's most venerable leader after
Bill Gates, not only Microsoft's most persistent critic and nemesis,
but also its most eminent defeated rival: Bill Joy of Sun.  In
engineering Mosaic and Netscape Navigator, streamlining the
communications functions and putting it all on the Net, Andreessen was
following in the codesteps of Joy.<P><PRE></PRE>

     Joy was not only a founder of Sun Microsystems, he was also the
primary champion of the Berkeley brand of Unix--BSD (Berkeley
Software Distribution) Unix--that he husbanded as a student at the
university.  BSD Unix was not only Sun's essential software technology,
but also the reference code for TCP/IP (Transmission Control
Protocol/Internet Protocol), the basic protocol stack of the Arpanet in
its evolution toward the current Internet.<P><PRE></PRE>

     By upgrading the TCP/IP protocol to run on an ethernet rather than
only on 50-kilobit-per-second Arpanet lines and then giving away the
code, Bill Joy made the Internet possible.  When Sun declared in 1988
that the network is the computer, the network it had in mind was run by
Bill Joy's Network File System (NFS), and it incorporated TCP/IP.  Says
Eric Schmidt--Bill Joy's Berkeley colleague, now chief technical
officer of Sun and leading prophet of the coming software inversion--
"Sun was selling the Internet before the Internet was there."<P><PRE></PRE>

     Indeed, because Sun computers running BSD Unix were the most
robust vessels for TCP/IP, the lion's share of all host computers on
the Web are still Sun's, and Sun is experiencing an unexpected surge of
earnings in the wake of the Web.  Now the computer world is wielding
Marc Andreessen's browser to rush toward the Net, wrenching the sphere
from its moorings in Redmond, and allowing it to oscillate toward a new
center in Silicon Valley.  Even Bill Gates, the last holdout against
Joy's network standard, is now bundling TCP/IP with Windows 95.  Joy
must feel that the industry is coming home at last.<P><PRE></PRE>
     
     Just as Gates ignited the personal computer market by writing
Basic for the PC, Joy is launching a new era on the Net by supplying a
suitable software language, Java.  Joy foreshadowed Java at the 1990 PC
Forum conference when he said, "Large programs are embarrassing because
they have a fixed set of ideas and so much code that it's very
difficult to change them.  And they all tend to reflect existing
metaphors, not the new metaphors.  Everybody's using C++.  That's a
'crusty' language.  It's very hard to understand.<P><PRE></PRE>

     "I'm starting a small group to try to do something small--Sun
Aspen Smallworks.  I believe it's possible to do small systems of a few
hundred thousand lines of code that live in this world of persistent
distributed objects with open protocols [and] make an incredible
difference--much more than an extra 100,000 lines on a 10-million-
line system.  So I'm looking for a few great hackers."<P><PRE></PRE>

     The one he found was redoubtable Sun engineer James Gosling.
Called by John Doerr of Kleiner Perkins "perhaps the world's greatest
living programmer," Gosling is a bearded man with shaggy blondish hair.
He displays a subtly wounded look that is possibly the effect of a
career that, to that point, had consisted mostly of brilliant failures.
But, like Joy, Gosling was eager to do something small: to bring Sun
into the world of consumer electronics where a large program used no
more than a few thousand lines.  In 1992, the company spun out a
subsidiary named FirstPerson, Inc. to pursue this market.<P><PRE></PRE>

     The goal was to conceive a way to take news, images, animations
and other real-time functions in cell sites and base stations and
download them to handheld devices such as digital cellular phones.  But
with the Newton fiasco, personal digital assistants began to fall from
favor and Sun and the rest of the lemmings decided to pursue the
suddenly seductive siren of interactive TV.  Again, they would use the
Java (at the time called "Oak") programming language, this time running
not on cellular phones, but in set-top boxes.  Here, too, the programs
would have to be elegant and compact to use the sparse memories
affordable for a consumer appliance.  However, like Jim Clark--and
everyone else--Sun would soon discover that interactivity merely
offers cosmetics for the corpse of a dying television industry.<P><PRE></PRE>

     At this point, the project was in turmoil and former Apple
designer Wayne Rosing, its first manager, was on his way out.  In May of
last year, Sun technical chief Eric Schmidt entered the breach,
collapsed the set-top project into a joint venture with Thomson
Consumer Electronics, which had bought RCA, and summoned Joy from
Aspen.  Joy returned and spent the entire summer last year in Palo Alto
working with Schmidt and Gosling to figure out a strategy for Java.  As
the work proceeded, it became clear that the characteristics of a
language suitable for PDAs not only gratified Joy's Laws of software,
but also fit almost perfectly the needs of the Web.<P><PRE></PRE>

     Like many technology projects that seem to spring full-blown from
the brow of a genius, Java is in fact the fruit of a near-lifelong
quest.  Gosling's career began at age 14 in Calgary when, during a high
school tour, he memorized the code to the locks on the doors of the
computer center at the University of Calgary.  He then regularly
admitted himself to read computer texts and use the DEC PDP-8s.  He
became so proficient that he was hired a year later by Digital
Equipment to write machine code to be used for analyses of data on the
aurora borealis from Isis satellites.<P><PRE></PRE>

     Going on to Carnegie Mellon University to study under the eminent
Robert Sproull and Raj Reddy, he wrote a text editor called EMACS, a
Pascal compiler and a thesis entailing the creation of a program to do
drawings of levers and strings in visual, interactive models.  After
graduation in 1981, he joined an IBM lab in Pittsburgh, where =he
developed the Andrew Windows System.  The first major program that could
control a window on a computer remotely across a network, it never
found a home.  But it launched Gosling on a 15-year struggle with the
challenge of how to send programs across a network that could be
executed on other computers.<P><PRE></PRE>

     Gosling had a breakthrough in 1983 at a Sun Microsystems
conference at the Red Lion in San Jose.  There, Joy observed Gosling's
Andrew Windows System dramatically outperforming a workstation running
Sun View, and began a concerted effort to recruit him.  Soon after,
Gosling came to Sun to develop a remote windows system called NeWS
(Networked Extensible Windows System).  Initially received with great
critical acclaim in the industry, it was eventually blocked by the X-
Windows consortium despite performing far more efficiently over a
network.  Long a student of object-oriented programming beginning with
the Simula language, Gosling followed his NeWS project with a compound
document architecture, joining text and images.  It, too, garnered much
praise and paltry use.<P><PRE></PRE>

     Then came Sun's ill-fated pursuit of consumer electronic products.
Gosling set out to develop appropriate programs in C++.  But it soon
became clear to him that this language failed on nearly all the crucial
criteria.  In particular, it was neither reliable nor secure, which,
funnily enough, turned out to be two sides of the same coin.  "The gun
you shoot the burglar with can also shoot you in the foot."  That was
C++.  It had pointer code that allowed rogue programs to invade and
corrupt a target operating system.<P><PRE></PRE>

     So Gosling began revising C++ code into something that has been
termed "C++ minus minus."  Returning to the inspiration of Andrew and
NEWS, he adapted the language to enable real-time operations across a
network.  In order to run a variety of different programs on a variety
of linked devices, from set-top boxes to palmtop remotes, he made it
inherently platform-neutral and nomadic.  It would have to be a language
at home on a network.<P><PRE></PRE>

     The project ended with Java, an efficient programming language
that is safe, simple, reliable and real-time, yet familiar to anyone
who has used C or C++.  Designed for PDAs on infrared networks, it
turned out to be perfectly adapted for the Internet.  Many of Java's
virtues are made possible by the fact that it is interpreted rather
than compiled--that means that it is translated line by line in real
time in the user's computer rather than converted to machine language
in batch mode by the software vendor.<P><PRE></PRE>

     Most languages are written in two stages.  The first is source
code, couched at a level of abstraction that rarely reveals its
purposes or algorithmic procedures.  Normally, source code is
proprietary and not revealed to the user.<P><PRE></PRE>

     The second stage is compilation.  The compiler translates the
abstractions of the source code into "binaries"--the machine language
of a particular computer, locked into the set of instructions that its
central processing unit can perform.<P><PRE></PRE>

     Java, by contrast, is compiled not to an instruction set peculiar
to a particular microprocessor but to a virtual machine or generic
computer.  Putting the language into an intermediate binary form allows
creation of programs that are not locked into any particular hardware
platform, but that can still be adapted to run fast.  The intermediate
code is translated line by line by a software program called an
interpreter located in the target computer.<P><PRE></PRE>

     Java's interpreters take up a parsimonious 45 kilobytes of memory.
Sun already has Java interpreters in the works for Microsoft Windows
95, the Mac, Windows NT and several flavors of Unix.  Netscape will
include the appropriate interpreter in future versions of the Netscape
browser.  This means that any program written in Java will be portable
to any common computer platform.<P><PRE></PRE>

     On the surface, this portability does not seem remarkable.  All
programs written in C, C++ or other compiled languages can be ported to
any target platform simply by running the source code through the
appropriate compiler, just as Mosaic was compiled for various platforms
at the NCSA.  The difference is that Java can be "compiled" line by line
in real time.  That is, it is interpreted in byte-level code in the
client machine.  This makes all the difference.<P><PRE></PRE>

     It means that programs no longer have to reside in the machine
where they are used, or be written for that machine in order to be
executed by it.  Potentially, a Java program can reside anywhere on the
entire Internet and be executed by any computer attached to the
Internet.  The little interpreters--sure to become cheap and
ubiquitous as they are distributed by Netscape and by other suppliers
of browsers--make Java programs "dynamically portable" in real time.<P><PRE></PRE>
     
     Dynamically portable programs are suitable for a nomadic existence
on the Net, rather than a mere settled life on the desktop.  Java thus
emancipates software from computer architecture.  It offers a software
paradigm radically different from the Microsoft model, which is based
not only on static compilation, but on often-concealed, proprietary
source code.<P><PRE></PRE>

     Suddenly, the entire world of new software is potentially
available to every computer owner.  Rather than being restricted to the
set of programs you own, you can use any program on the Net, just as
now you can tap any information on the Net.  You not only have data at
your fingertips, you have programs at your fingertips.  This means
"executable content," as Joy describes it and as John Gage demonstrated
in his speech at the Westin St.  Francis Hotel this June.  Whether a
film, a graph, an animation, a real-time bit stream on the Nasdaq
ticker or the Reuters wire, a virtual reality visualization, or a game,
it can be downloaded to your machine with its program in tow.<P><PRE></PRE>

     Owning the operating system and associated tool libraries becomes
irrelevant to selling applications.  Owning the application or channel
becomes irrelevant to selling the content.  To the extent that Java or a
similar language prevails, software becomes truly open for the first
time.  The Microsoft desktop becomes a commodity; the Intel
microprocessor becomes peripheral--the key "microprocessor" is the
software code in the Java interpreter.<P><PRE></PRE>

     Interpreted or not, however, nomadic programs will not be
permitted to range the Net unless they are also secure programs.  By
several judicious alterations of C++ procedures, Gosling made Java
above all a secure language.  Many viruses depend on taking an integer
in the program and using it to "point" to a low address in the memory
where operating code resides.  Java removes this pointer conversion
function.  In addition, incorporated into the Java interpreter is a code
verifier.  As soon as an application shows up in a machine, the
interpreter does an instant virus scan.  Finally, when Java binary
arrives at a machine, it will bear an RSA data signature that verifies
the source of the code and guarantees that it has not been altered or
corrupted.<P><PRE></PRE>

     These security provisions make Java programs the first certifiable
citizens of the Net.  As Java interpreters become ubiquitous, any
application program that is anchored on a particular platform and
desktop will eventually become a cripple, like a pro athlete who fears
to fly.<P><PRE></PRE>

     The computer hollows out, and you no longer are concerned with its
idiosyncrasies, its operating system, its instruction set, even its
resident applications.  Instead, you can focus on content--on the
world rather than on the desktop architecture.  If you want to run a
helicopter model on your screen, you don't have to worry about whether
you have AutoCAD on your hard drive.  You can run a video of the
helicopter without owning the right decoder, whether Indeo (Intel's
standard) or MPEG-4 (designed for portable appliances) or dynamic JPEG.
The helicopter flies over the Net with its own executable code.  The
network is no longer a threatening place.  If you want to use a program
from Finland, you don't have to worry that it will introduce a
malignant virus to your machine.<P><PRE></PRE>

     Your computer will never be the same.  No longer will the features
of the desktop decide the features of the macblue.  No> longer will the
size of your hard drive or the database in your LAN server determine
the reach of your information processing.  No longer will the programs
in your machine determine the functions you can perform.  The network is
the computer.  The computer becomes a peripheral to the Internet and the
Web.<P><PRE></PRE>

     Since the release of Java and a demonstration Web browser called
HotJava, written in the language on the Sun home page, Gosling has
experienced the kind of sudden Internet celebrity undergone by
Andreessen and Bina.  Unlike Andreessen, he seems somewhat baffled by it
all.  But in the long run, his contribution may be greater.  Browsers and
servers may come and go, but successful new languages are extremely
rare.  Java, or something like it, is the key to a truly interactive
Internet and a fully hollowed-out computer.<P><PRE></PRE>

     Recently, Bill Joy made a presentation to the Sun board, outlining
an upgrade path for the future of the language.  Joy is resolved that
Java will not go the way of Andrew and NEWS.  Like Jim Clark, he has
even turned to the troubled supercomputer arena to find a treasure
trove of new hackers.  Sun hired some 20 new programmers from the
recently defunct but boldly pioneering Thinking Machines and Kendall
Square Research.  Presumably, they can learn to think small.<P><PRE></PRE>

     Gosling shakes his head at all the uproar.  He now finds himself
falling thousands of messages behind in his email.  Linked to the Net
by a mere T1 line, even Sun's Java server broke down under the
overload.  But Gosling himself seems to be holding up better.  His
speaking schedule has multiplied to a rate of three talks a week.
Scores of people tell him they are using the language as a replacement
for C, for IR (information resource) tools and for other general-
purpose applications.  Giant Japanese companies such as Sony and Sega
besiege him.  Finally, late in June, even Berners-Lee gave Java his
imprimatur as "one of the most exciting things happening on the Web
right now."<P><PRE></PRE>

     A movie buff, Gosling sees Java, Netscape and similar programs
changing the image of the cybersphere from an alien and menacing
dystopia, as depicted famously in Blade Runner, into a realm resembling
Star Trek, where computers are trusted tools.  Perhaps this
transformation will favor the emergence of the amiable and gregarious
young Marc Andreessen as the paladin of cyberspace, replacing the
fiercely brilliant but widely feared Bill Gates.<P><PRE></PRE>

     But as Andreessen admits, a more likely outcome is a massive move
by Microsoft onto the Net where the two will enter battle with scores
of contenders.  This month, Microsoft announced an array of Internet
services, under the rubric Blackbird, with many interesting features.
But it works only with Microsoft Network Services, which will not
become truly widespread for another year.  Beginning with virtually no
market share and a year or so behind, Gates will become an underdog at
last.  Perhaps even the Justice Department will notice.  In the age of
the hollowed-out computer, the king of the desktop rules an emigrating
empire.<P>
<PRE>
</PRE>
<B><PRE>

                                               #####</PRE></B>
